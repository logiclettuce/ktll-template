/*
 * This file is generated by jOOQ.
 */
package org.logiclettuce.database;


import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.logiclettuce.database.tables.FlywaySchemaHistory;
import org.logiclettuce.database.tables.Users;
import org.logiclettuce.database.tables.UsersRoles;
import org.logiclettuce.database.tables.records.FlywaySchemaHistoryRecord;
import org.logiclettuce.database.tables.records.UsersRecord;
import org.logiclettuce.database.tables.records.UsersRolesRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<FlywaySchemaHistoryRecord> FLYWAY_SCHEMA_HISTORY_PK = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("flyway_schema_history_pk"), new TableField[] { FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);
    public static final UniqueKey<UsersRecord> USERS_EMAIL_KEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_email_key"), new TableField[] { Users.USERS.EMAIL }, true);
    public static final UniqueKey<UsersRecord> USERS_LOGIN_KEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_login_key"), new TableField[] { Users.USERS.LOGIN }, true);
    public static final UniqueKey<UsersRecord> USERS_PKEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_pkey"), new TableField[] { Users.USERS.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<UsersRolesRecord, UsersRecord> USERS_ROLES__USERS_ROLES_USER_ID_FKEY = Internal.createForeignKey(UsersRoles.USERS_ROLES, DSL.name("users_roles_user_id_fkey"), new TableField[] { UsersRoles.USERS_ROLES.USER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
}
